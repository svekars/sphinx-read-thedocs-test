name: Check spelling

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  pyspelling:
    runs-on: ubuntu-20.04
    steps:
      - name: Check for skip label and get changed files
        id: check-files
        uses: actions/github-script@v6
        with:
          script: |
            let skipCheck = false;
            let changedFiles = [];
            
            if (context.eventName === 'pull_request') {
              // Check for skip label
              const { data: labels } = await github.rest.issues.listLabelsOnIssue({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number
              });
              skipCheck = labels.some(label => label.name === 'skip-spell-check');
              
              if (!skipCheck) {
                // Get changed files in PR
                const { data: files } = await github.rest.pulls.listFiles({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number
                });
                
                changedFiles = files
                  .filter(file => file.filename.match(/\.(py|rst|md)$/))
                  .map(file => file.filename);
              }
            } else {
              // For push events, we'll still need to use git diff
              // We'll handle this after checkout
            }
            
            core.setOutput('skip', skipCheck.toString());
            core.setOutput('files', changedFiles.join('\n'));
            core.setOutput('is-pr', (context.eventName === 'pull_request').toString());

      - uses: actions/checkout@v4
        if: steps.check-files.outputs.skip != 'true'
        with:
          fetch-depth: 0

      - name: Get changed files for push event
        if: |
          steps.check-files.outputs.skip != 'true' &&
          steps.check-files.outputs.is-pr != 'true'
        id: push-files
        run: |
          CHANGED_FILES=$(git diff --name-only HEAD^..HEAD -- '*.py' '*.rst' '*.md')
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check if relevant files changed
        if: steps.check-files.outputs.skip != 'true'
        id: check
        run: |
          if [ "${{ steps.check-files.outputs.is-pr }}" == "true" ]; then
            FILES="${{ steps.check-files.outputs.files }}"
          else
            FILES="${{ steps.push-files.outputs.files }}"
          fi
          
          if [ -z "$FILES" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "No relevant files changed (*.py, *.rst, *.md), skipping spell check"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "Found changed files to check:"
            echo "$FILES"
          fi

      - uses: actions/setup-python@v4
        if: |
          steps.check-files.outputs.skip != 'true' &&
          steps.check.outputs.skip != 'true'
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        if: |
          steps.check-files.outputs.skip != 'true' &&
          steps.check.outputs.skip != 'true'
        run: |
          pip install pyspelling
          sudo apt-get install aspell aspell-en

      - name: Run spell check on each file
        if: |
          steps.check-files.outputs.skip != 'true' &&
          steps.check.outputs.skip != 'true'
        run: |
          # Create a basic configuration template
          cat > .spellcheck.yml << EOF
          matrix:
          - name: Python/RST/MD
            aspell:
              lang: en
            dictionary:
              encoding: utf-8
              wordlists:
              - en-wordlist.txt
            pipeline:
            - pyspelling.filters.text
            sources:
            - '{{file}}'
          EOF
          
          # Get the list of files
          if [ "${{ steps.check-files.outputs.is-pr }}" == "true" ]; then
            FILES="${{ steps.check-files.outputs.files }}"
          else
            FILES="${{ steps.push-files.outputs.files }}"
          fi
          
          # Check each file individually
          EXIT_CODE=0
          echo "$FILES" | while read -r file; do
            if [ -n "$file" ]; then
              echo "Checking spelling in $file"
              sed "s|{{file}}|$file|g" .spellcheck.yml > temp_config.yml
              if ! pyspelling -c temp_config.yml; then
                EXIT_CODE=1
              fi
            fi
          done
          exit $EXIT_CODE
